---

# Notes:
# Sample project C code is not presently written to produce a release artifact.
# As such, release build options are disabled.
# This sample, therefore, only demonstrates running a collection of unit tests.

:project:
  :use_exceptions: TRUE
  :use_test_preprocessor: TRUE
  :use_auxiliary_dependencies: TRUE
  :build_root: build
  :release_build: TRUE # This is required for :dependencies: to work
  :test_file_prefix: test_
  :which_ceedling: gem
  :ceedling_version: 0.31.1
  :compile_threads: 16
  :default_tasks:
    - test:all

#:test_build:
#  :use_assembly: TRUE

#:release_build:
#  :output: MyApp.out
#  :use_assembly: FALSE

:environment:

:extension:
  :executable: .out

:paths:
  :test:
    - +:test/**
  :source:
    - src/**
    - inc/**
  :libraries: []

:defines:
  # in order to add common defines:
  #  1) remove the trailing [] from the :common: section
  #  2) add entries to the :common: section (e.g. :test: has TEST defined)
  :common: &common_defines []
  :test:
    - *common_defines
    - TEST
  :test_preprocess:
    - *common_defines
    - TEST
  :test_u_cx_at_client_no_urc_queue:
    - U_CX_USE_URC_QUEUE=0

:cmock:
  :mock_prefix: mock_
  :when_no_prototypes: :warn
  :enforce_strict_ordering: TRUE
  :plugins:
    - :ignore
    - :callback
    - :expect_any_args
    - :ignore_arg
    - :return_thru_ptr
  :treat_as:
    uint8:    HEX8
    uint16:   HEX16
    uint32:   UINT32
    int8:     INT8
    bool:     UINT8
  :includes:
  :treat_externs: :include
:module_generator:
    :project_root: ./
    :source_root: src/
    :inc_root: inc/
    :test_root: test/
    :naming: 'snake'

# Add -gcov to the plugins list to make sure of the gcov plugin
# You will need to have gcov and gcovr both installed to make it work.
# For more information on these options, see docs in plugins/gcov
:gcov:
  :reports:
    - HtmlDetailed
  :gcovr:
    :html_medium_threshold: 75
    :html_high_threshold: 90
    :config_file: scripts/gcov.cfg

:junit_tests_report:
  :artifact_filename: report_junit.xml
#:tools:
# Ceedling defaults to using gcc for compiling, linking, etc.
# As [:tools] is blank, gcc will be used (so long as it's in your system path)
# See documentation to configure a given toolchain for use

# LIBRARIES
# These libraries are automatically injected into the build process. Those specified as
# common will be used in all types of builds. Otherwise, libraries can be injected in just
# tests or releases. These options are MERGED with the options in supplemental yaml files.
:libraries:
  :placement: :end
  :flag: "-l${1}"
  :path_flag: "-L ${1}"
  :system: []    # for example, you might list 'm' to grab the math library
  :test: []
  :release: []
:tools:
  :test_file_preprocessor:
    :executable: gcc
    :arguments:
    - ''
    - ''
    - "-E"
    - -I"$": COLLECTION_PATHS_TEST_SUPPORT_SOURCE_INCLUDE_VENDOR
    - -I"$": COLLECTION_PATHS_TEST_TOOLCHAIN_INCLUDE
    - "-D$": COLLECTION_DEFINES_TEST_AND_VENDOR
    - "-D$": DEFINES_TEST_PREPROCESS
    - "-DGNU_COMPILER"
    - '"${1}"'
    - -o "${2}"
  :test_includes_preprocessor:
    :executable: gcc
    :arguments:
    - ''
    - ''
    - "-E"
    - "-MM"
    - "-MG"
    - -I"$": COLLECTION_PATHS_TEST_SUPPORT_SOURCE_INCLUDE_VENDOR
    - -I"$": COLLECTION_PATHS_TEST_TOOLCHAIN_INCLUDE
    - "-D$": COLLECTION_DEFINES_TEST_AND_VENDOR
    - "-D$": DEFINES_TEST_PREPROCESS
    - "-DGNU_COMPILER"
    - '"${1}"'
  :test_dependencies_generator:
    :executable: gcc
    :arguments:
    - ''
    - ''
    - "-E"
    - -I"$": COLLECTION_PATHS_TEST_SUPPORT_SOURCE_INCLUDE_VENDOR
    - -I"$": COLLECTION_PATHS_TEST_TOOLCHAIN_INCLUDE
    - "-D$": COLLECTION_DEFINES_TEST_AND_VENDOR
    - "-D$": DEFINES_TEST_PREPROCESS
    - "-DGNU_COMPILER"
    - -MT "${3}"
    - "-MM"
    - "-MD"
    - "-MG"
    - -MF "${2}"
    - -c "${1}"
  :post_test:
    :executable: "scripts/process_coverage.sh"
    :arguments:
      - "${1}"

:plugins:
  :load_paths:
    - "#{Ceedling.load_path}"
  :enabled:
    - stdout_pretty_tests_report
    - module_generator
    - gcov
    - xml_tests_report
    - junit_tests_report
    - command_hooks

:flags:
  :test:
    :compile:
        :*:
            - -Werror
            - -Wall
            - -Wextra
            - -fsanitize=address
            - -fsanitize=undefined
            - -fsanitize-address-use-after-scope
            - -fno-sanitize-recover
            - -fstack-protector-all
            - -fno-omit-frame-pointer
            - -O1  # Set O1 so that GCC correctly detects uninitialized variables: https://stackoverflow.com/questions/17705880/gcc-failing-to-warn-of-uninitialized-variable
            - -Wno-clobbered # Needed when enabling -O1 for disabling warning in the CMock runners
    :link:
        :*:
            - -fsanitize=address
            - -fsanitize=undefined
            - -fsanitize-address-use-after-scope
            - -fno-sanitize-recover
            - -lpthread
  :gcov:
    :compile:
        :*:
            - -Werror
            - -Wall
            - -Wextra
            - -fsanitize=address
            - -fsanitize=undefined
            - -fsanitize-address-use-after-scope
            - -fno-sanitize-recover
            - -fstack-protector-all
            - -fno-omit-frame-pointer
            - -O1  # Set O1 so that GCC correctly detects uninitialized variables: https://stackoverflow.com/questions/17705880/gcc-failing-to-warn-of-uninitialized-variable
            - -Wno-clobbered # Needed when enabling -O1 for disabling warning in the CMock runners
    :link:
        :*:
            - -fsanitize=address
            - -fsanitize=undefined
            - -fsanitize-address-use-after-scope
            - -fno-sanitize-recover
            - -lpthread

